// Code generated by go-swagger; DO NOT EDIT.

package stations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSensorDataParams creates a new SensorDataParams object
// with the default values initialized.
func NewSensorDataParams() *SensorDataParams {
	var ()
	return &SensorDataParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSensorDataParamsWithTimeout creates a new SensorDataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSensorDataParamsWithTimeout(timeout time.Duration) *SensorDataParams {
	var ()
	return &SensorDataParams{

		timeout: timeout,
	}
}

// NewSensorDataParamsWithContext creates a new SensorDataParams object
// with the default values initialized, and the ability to set a context for a request
func NewSensorDataParamsWithContext(ctx context.Context) *SensorDataParams {
	var ()
	return &SensorDataParams{

		Context: ctx,
	}
}

// NewSensorDataParamsWithHTTPClient creates a new SensorDataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSensorDataParamsWithHTTPClient(client *http.Client) *SensorDataParams {
	var ()
	return &SensorDataParams{
		HTTPClient: client,
	}
}

/*SensorDataParams contains all the parameters to send to the API endpoint
for the sensor data operation typically these are written to a http.Request
*/
type SensorDataParams struct {

	/*StationID
	  Station identifier

	*/
	StationID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the sensor data params
func (o *SensorDataParams) WithTimeout(timeout time.Duration) *SensorDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sensor data params
func (o *SensorDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sensor data params
func (o *SensorDataParams) WithContext(ctx context.Context) *SensorDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sensor data params
func (o *SensorDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sensor data params
func (o *SensorDataParams) WithHTTPClient(client *http.Client) *SensorDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sensor data params
func (o *SensorDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStationID adds the stationID to the sensor data params
func (o *SensorDataParams) WithStationID(stationID int64) *SensorDataParams {
	o.SetStationID(stationID)
	return o
}

// SetStationID adds the stationId to the sensor data params
func (o *SensorDataParams) SetStationID(stationID int64) {
	o.StationID = stationID
}

// WriteToRequest writes these params to a swagger request
func (o *SensorDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param stationId
	if err := r.SetPathParam("stationId", swag.FormatInt64(o.StationID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
