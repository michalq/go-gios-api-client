// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SensorParam sensor param
// swagger:model SensorParam
type SensorParam struct {

	// id param
	// Required: true
	IDParam *int64 `json:"idParam"`

	// param code
	// Required: true
	ParamCode AcquisitionType `json:"paramCode"`

	// param formula
	// Required: true
	ParamFormula *string `json:"paramFormula"`

	// param name
	// Required: true
	ParamName *string `json:"paramName"`
}

// Validate validates this sensor param
func (m *SensorParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIDParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParamCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParamFormula(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParamName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorParam) validateIDParam(formats strfmt.Registry) error {

	if err := validate.Required("idParam", "body", m.IDParam); err != nil {
		return err
	}

	return nil
}

func (m *SensorParam) validateParamCode(formats strfmt.Registry) error {

	if err := m.ParamCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paramCode")
		}
		return err
	}

	return nil
}

func (m *SensorParam) validateParamFormula(formats strfmt.Registry) error {

	if err := validate.Required("paramFormula", "body", m.ParamFormula); err != nil {
		return err
	}

	return nil
}

func (m *SensorParam) validateParamName(formats strfmt.Registry) error {

	if err := validate.Required("paramName", "body", m.ParamName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SensorParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SensorParam) UnmarshalBinary(b []byte) error {
	var res SensorParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
